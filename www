#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

for(var i = 0; i < process.argv.length; i++){
  switch(process.argv[i]){
    case '-port':
    case '--port':
      process.env.PORT = process.argv[i+1];
      break;
  } 
}

var httpPort = normalizePort(process.env.PORT || '3000');

//var port = normalizePort(process.env.PORT || '80');
//app.set('port', port);

if(fs.existsSync("/etc/letsencrypt/live/maps.mc-smp.com/fullchain.pem")
  && fs.existsSync("/etc/letsencrypt/live/maps.mc-smp.com/privkey.pem")){
     
  const credentials = {
    cert: fs.readFileSync("/etc/letsencrypt/live/maps.mc-smp.com/fullchain.pem"),
    key: fs.readFileSync("/etc/letsencrypt/live/maps.mc-smp.com/privkey.pem")
  }
  var httpsServer = https.createServer(credentials, app);
  httpsServer.listen(443);
  process.env.HTTPS_ENABLED = 'true';
}

var redirect = require('express')();
redirect.use('/', require('express').Router().get('/',function(req, res){
  //res.redirect('https://' + req.headers.host + req.url);
  res.sendStatus(200);
}));

var httpServer = http.createServer(app);
httpServer.listen(httpPort);

//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}